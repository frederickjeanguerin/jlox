description ¤ input ¤ expectedErrors

# Bad characters and line numbers (lexer errors)
Bad character ¤ 2 + ± 3 ¤ unexpected character '±'
Bad character on line 2 ¤ 2 \n+ ½ 3 ¤ line 2, unexpected character '½'
Bad character on line 1 and 2 ¤ 2 ± \n+ ½ 3 ¤ line 1, line 2

# Missing operand
Missing operand at end ¤ ! ¤ at end, expect expression
Missing operand in grouping ¤ (!) ¤ at '[)]', expect expression
Missing last operand at end ¤ 1 + ¤ at end, expect expression
Missing last operand in grouping ¤ (1 + ) ¤ at '[)]', expect expression
Missing first operand ¤ + 1 ¤ at '[+]', expect first operand
Missing first operand in grouping ¤ (, 1) ¤ at ',', expect expression

# Missing many operands
Missing 2 operands ¤ + ¤ at '[+]', at end, expect first operand, expect expression

# Print statement
Print missing expression ¤ print ¤ at end, expect expression
Print missing semi ¤ print 33 ¤ at end, expect ';'

# Expression statement
Expression statement missing semi ¤ 1 2 ¤ at '2', expect ';'

# Variable declaration
Variable declaration missing variable name ¤ var = 0; ¤ at '=', expect variable name
Variable declaration missing initializer expression ¤ var ab = ; ¤ at ';', expect expression

# Synchronisation
Synchronisation on semicolon ¤ 1 + ;\n 2;\n print ;\n * 4;\n - ¤ line 1, at ';', line 3, at ';', line 4, at '*', line 5, at end

# Variable assignment
# Variable assignment bad lvalue ¤ (a) = 1 ¤ invalid assignment target
# Variable assignment bad lvalue ¤ a + b = 1 + 2 ¤ invalid assignment target

# Block
Block missing right brace ¤ 3; { 1 + 2 ¤ expect '[}]'
Block synchronization ¤ { print } \n print true + 2; ¤ line 1, line 2

# If
If missing ( ¤ if true print 30; ¤ at 'true', expect '[(]'
If missing ) ¤ if (true print 30; ¤ at 'print', expect '[)]'

# While
While missing ( ¤ while true print 30; ¤ at 'true', expect '[(]'
While missing ) ¤ while (true print 30; ¤ at 'print', expect '[)]'

# For
For missing ( ¤ for true print 30; ¤ at 'true', expect '[(]'
For missing ) ¤ for (;;; ¤ at ';', expect '[)]'
For missing first ; ¤ for () ¤ at '[)]', expect ';'
For missing second ; ¤ for (;) ¤ at '[)]', expect condition or ';'
For invalid initializer ¤ for ( while(1);;); ¤ at 'while', expect expression

# Break & Continue
Break missing semi ¤ break if ¤ at 'if', expect ';'
Continue missing semi ¤ continue if ¤ at 'if', expect ';'
Break outside loop ¤ while (1); break; ¤ at 'break', break outside of any loop
Continue outside loop ¤ while (1); continue; ¤ at 'continue', continue outside of any loop

# Increment & Decrement
Increment invalid target ¤ ++1 ¤ at '[+][+]', invalid .*target
Increment invalid target ¤ --1 ¤ at '[-][-]', invalid .*target

# Function call
Call missing closing ) ¤ call(1, 2, 3 ; ¤ at ';', expect '[)]'
Call missing argument ) ¤ call(1, 2, ) ; ¤ at '[)]', expect expression
Call has too many arguments ¤ call(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 256, 6, 7, 8, 9) ¤ at '256', more than 255 arguments
