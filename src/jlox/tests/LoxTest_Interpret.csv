description ¤ input ¤ expectedPrints

# Simple expressions
Simple number ¤ 123 ¤ 123
Simple decimal number ¤ 987.125 ¤ 987.125
Simple string ¤ ""abc"" ¤ abc
Simple nil ¤ nil ¤ nil
Simple true ¤ true ¤ true
Simple false ¤ false ¤ false

# Simple with comment
Simple number with line comment ¤ 456 // comment ¤ 456
Simple number with block comment ¤ /* comment */ 456 ¤ 456
Simple number with block and line comment ¤ /* comment */ 456 // comment ¤ 456

# Unary
Unary minus ¤ -55 ¤ -55
Unary bang ¤ !true ¤ false
Unary multiple ¤ ---55 ¤ -55

# Factor
Factor star ¤ 23 * 11 ¤ 253
Factor slash ¤ 23 / 10 ¤ 2.3
Factor and unary ¤ -10 * -30 ¤ 300
Factor multiple ¤ 1 * 2 / 4 * 6 ¤ 3

# Term
Term plus ¤ 2 + 3 ¤ 5
Term minus ¤ 6 - 8 ¤ -2
Term and factor ¤ 11 + -4 * 5 ¤ -9
Term multiple ¤ 1 - 2 + 3 - 4 ¤ -2

# Comparison
Comparison < ¤ 1 < 2 ¤ true
Comparison < ¤ 2 < 2 ¤ false
Comparison <= ¤ 1 <= 2 ¤ true
Comparison <= ¤ 2 <= 2 ¤ true
Comparison > ¤ 1 > 2 ¤ false
Comparison > ¤ 2 > 2 ¤ false
Comparison >= ¤ 1 >= 2 ¤ false
Comparison >= ¤ 2 >= 2 ¤ true
Comparison complex ¤ 1 + 2 < 2 * 3 ¤ true

# Equality
Equality ¤ 1 == 2 ¤ false
Inequality ¤ 1 != 2 ¤ true
Equality complex ¤ 1 + 2 == 2 * 3 ¤ false
Equality complex ¤ 1 + 2 == 1 * 3 ¤ true
Equality multiple ¤ 1 == 2 == 3 ¤ false
Inequality multiple ¤ 1 != 2 != 3 ¤ true

# Ternary
Ternary simple ¤ true ? 1 : 2 ¤ 1
Ternary simple ¤ false ? 1 : 2 ¤ 2
Ternary complex ¤ 1 == 2 ? 3 + 4 : -5 ¤ -5
Ternary multiple ¤ false ? 1 : true ? 2 : 3 ¤ 2
Ternary multiple ¤ false ? 1 : false ? 2 : 3 ¤ 3
Ternary multiple ¤ true ? 1 : false ? 2 : 3 ¤ 1

# Comma
Comma simple ¤ 1, 2 ¤ 2
Comma complex ¤ 1, 2, 3 + 4 ¤ 7

# Grouping
Grouping simple ¤ (1) ¤ 1
Grouping complex ¤ (1 + 2) * 3 ¤ 9
Grouping multiple ¤ (((1))) ¤ 1

# Expression statement
Expression simple ¤ 2; ¤ ""
Expression complex ¤ 55 - 4; ¤ ""
Expression multiple ¤ 1; 2; 3; ¤ ""

# Print statement
Print simple ¤ print 23; ¤ 23
Print complex ¤ print 2 + 3; ¤ 5
Print multiple ¤ print 1; print 2; print 3; ¤ 1 2 3

# Last expression statement
Last simple ¤ 1; 2; 3 ¤ 3

# No statement
No statement ¤ "" ¤ ""

# Variables
Variable definition without initializer ¤ var abc; abc ¤ nil
Variable definition with initializer ¤ var abc = 10; abc ¤ 10
Variable definition and computation ¤ var abc = 10; abc + abc ¤ 20
Variable from variable ¤ var a = 10; var b = a + 1; b ¤ 11
Variable redefinition ¤ var a = 10; var b = a; var a = 20; a + b ¤ 30
Variable assignment simple ¤ var a; a = 10; a ¤ 10
Variable reassignment simple ¤ var a = 10 ; a = 20; a = 30; a ¤ 30
Variable self assignment ¤ var a = 10; a = a + 20; a ¤ 30
Variable assignment chaining ¤ var a; var b; var c; a = b = c = 10; a + b + c ¤ 30
