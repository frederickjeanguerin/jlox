description ¤ input ¤ expectedErrors

# Binary operator
Operator > ¤ true > 5 ¤ at '>', left operand, number expected
Operator > ¤ 5 > true ¤ at '>', right operand, number expected
Operator > ¤ true > true ¤ at '>', left operand, number expected
Operator >= ¤ true >= 5 ¤ at '>=', left operand, number expected
Operator < ¤ true < 5 ¤ at '<', left operand, number expected
Operator <= ¤ true <= 5 ¤ at '<=', left operand, number expected
Operator - ¤ true - 5 ¤ at '-', left operand, number expected
Operator * ¤ true * 5 ¤ at '[*]', left operand, number expected
Operator / ¤ true / 5 ¤ at '/', left operand, number expected

# Operator +
Operator + incompatible operands ¤ true + false ¤ at '[+]', operands cannot be added
Operator + incompatible operands ¤ 1 + false ¤ at '[+]', operands cannot be added
Operator + incompatible operands ¤ false + 1 ¤ at '[+]', operands cannot be added

# Division by zero
Division by zero ¤ 3 / 0 ¤ at '/', division by zero
Division by zero ¤ 0 / 0 ¤ at '/', division by zero
Division by zero ¤ 1.5 / 0 ¤ at '/', division by zero
Division by zero ¤ 1.5 % 0 ¤ at '%', division by zero

# Unary operator
Unary - ¤ - true ¤ at '-', right operand, number expected

# Undefined variables (symbols)
Undefined symbol in expression ¤ a ¤ at 'a', undefined symbol 'a'
Undefined symbol in multiple expression ¤ b + a ¤ at 'b', undefined symbol 'b'
Undefined symbol in assignment ¤ a = 10 ¤ at 'a', undefined symbol 'a'
Undefined symbol in chained assignment ¤ var a; c = b = a = 10 ¤ at 'b', undefined symbol 'b'
Uninitialized variable ¤ var a; 10 + a + 5 ¤ at 'a', uninitialized variable 'a'

# Block scope
Undefined variable out of scope ¤ var b = 20; { var a = 10; print a; } b + a ¤ undefined symbol 'a', /P0

# For loop
For loop local variable out of scope ¤ for (var a = 0; a < 5; a = a + 1); a ¤ undefined symbol 'a'

# Increment & Decrement
Increment boolean ¤ var i = true; ++i ¤ at 'i', expected 'Double' but got 'Boolean'
Decrement string ¤ var str = "a"; --str ¤ at 'str', expected 'Double' but got 'String'
Decrement nil ¤ var str = nil; --str ¤ at 'str', expected 'Double' but got 'Void'

# Native functions
Native clock takes 0 arg, not 1 ¤ clock(1) ¤ at '[(]', call expect 0 arguments, but got 1
Native clock takes 0 arg, not 3 ¤ clock(1, 2, 3) ¤ at '[(]', call expect 0 arguments, but got 3
Native lineSeparator takes 0 arg, not 2 ¤ lineSeparator(1, 2) ¤ at '[(]', call expect 0 arguments, but got 2
Native exit takes 1 arg, not 0 ¤ exit() ¤ at '[(]', call expect 1 arguments, but got 0
Native exit takes 1 arg, not 2 ¤ exit(1, 2) ¤ at '[(]', call expect 1 arguments, but got 2
Native exit expect number arg ¤ exit(false) ¤ at '[(]', type mismatch, expected 'double', got 'boolean'
Native exit expect number arg ¤ exit(""string"") ¤ at '[(]', type mismatch, expected 'double', got 'string'
Native exit expect number arg ¤ exit(nil) ¤ at '[(]', type mismatch, expected 'double', got 'void'

# Return
# TODO move to Static Analysis, because not really  runtime checks
Return outside any function 1 ¤ return; ¤ return outside function
Return outside any function 2 ¤ { return; } ¤ return outside function
Dead code 1 ¤ fun f() { print 30; return; 10; 20; } f(); ¤ /120, dead code, 10, 20, *30
Dead code 2 ¤ fun f() { print 30; { return; print 10; } print 20; } f(); ¤ /120, dead code, print 10, print 20, *30

# Lexical scope
Lexical scope 1 (var after fun)  ¤ fun plus(a) { print a + b; }; var b = 10; plus(5); ¤ /001, at 'b', undefined symbol

# Redefinition
Redefinition global ok ¤ var a = 10; var a = 20; print a; ¤ /100, *20
Redefinition local bad ¤ { var a = 10; var a = 20; fun a() {}; } ¤ /002, 'a' cannot be redeclared
Redefinition parameters bad ¤ fun plus(b, b, b) {} ¤ /002, 'b' cannot be redeclared
Redefinition sub block ok ¤ { var a = 10; { var a = 20; print a; } print a; } ¤ /200, *10, *20
Redefinition parameter in body bad ¤ fun f(a) { var a = 10; print a; } f(5); ¤ /001, 'a' cannot be redeclared
Redefinition parameter in body bad ¤ var f = fun (a) { var a = 10; print a; }; f(5); ¤ /001, 'a' cannot be redeclared