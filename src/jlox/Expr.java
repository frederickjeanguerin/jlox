// Automatically generated by jlox.tool.GenerateAst

package jlox;
import java.util.List;

@SuppressWarnings("unused")
abstract class Expr {
  interface Visitor<R> {
    R visitAssignExpr(Assign assign);
    R visitBinaryExpr(Binary binary);
    R visitCallExpr(Call call);
    R visitGroupingExpr(Grouping grouping);
    R visitLiteralExpr(Literal literal);
    R visitTernaryExpr(Ternary ternary);
    R visitTypeCheckExpr(TypeCheck typeCheck);
    R visitUnaryExpr(Unary unary);
    R visitVariableExpr(Variable variable);
  }
  interface VoidVisitor {
    void visitAssignExpr(Assign assign);
    void visitBinaryExpr(Binary binary);
    void visitCallExpr(Call call);
    void visitGroupingExpr(Grouping grouping);
    void visitLiteralExpr(Literal literal);
    void visitTernaryExpr(Ternary ternary);
    void visitTypeCheckExpr(TypeCheck typeCheck);
    void visitUnaryExpr(Unary unary);
    void visitVariableExpr(Variable variable);
  }
  interface WalkVisitor {
    void enterAssignExpr(Assign assign);
    void leaveAssignExpr(Assign assign);
    void enterBinaryExpr(Binary binary);
    void leaveBinaryExpr(Binary binary);
    void enterCallExpr(Call call);
    void leaveCallExpr(Call call);
    void enterGroupingExpr(Grouping grouping);
    void leaveGroupingExpr(Grouping grouping);
    void enterLiteralExpr(Literal literal);
    void leaveLiteralExpr(Literal literal);
    void enterTernaryExpr(Ternary ternary);
    void leaveTernaryExpr(Ternary ternary);
    void enterTypeCheckExpr(TypeCheck typeCheck);
    void leaveTypeCheckExpr(TypeCheck typeCheck);
    void enterUnaryExpr(Unary unary);
    void leaveUnaryExpr(Unary unary);
    void enterVariableExpr(Variable variable);
    void leaveVariableExpr(Variable variable);
  }

  static class Assign extends Expr {
    final Token name;
    final Expr value;

    Assign ( Token name, Expr value ) {
      this.name = name;
      this.value = value;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitAssignExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterAssignExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveAssignExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitAssignExpr(this);
    }
  }

  static class Binary extends Expr {
    final Expr left;
    final Token operator;
    final Expr right;

    Binary ( Expr left, Token operator, Expr right ) {
      this.left = left;
      this.operator = operator;
      this.right = right;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitBinaryExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterBinaryExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveBinaryExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitBinaryExpr(this);
    }
  }

  static class Call extends Expr {
    final Expr callee;
    final Token leftPar;
    final List<Expr> arguments;
    final Token rightPar;

    Call ( Expr callee, Token leftPar, List<Expr> arguments, Token rightPar ) {
      this.callee = callee;
      this.leftPar = leftPar;
      this.arguments = arguments;
      this.rightPar = rightPar;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitCallExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterCallExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveCallExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitCallExpr(this);
    }
  }

  static class Grouping extends Expr {
    final Expr expression;

    Grouping ( Expr expression ) {
      this.expression = expression;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitGroupingExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterGroupingExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveGroupingExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitGroupingExpr(this);
    }
  }

  static class Literal extends Expr {
    final Object value;

    Literal ( Object value ) {
      this.value = value;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitLiteralExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterLiteralExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveLiteralExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitLiteralExpr(this);
    }
  }

  static class Ternary extends Expr {
    final Expr left;
    final Token leftOp;
    final Expr middle;
    final Token rightOp;
    final Expr right;

    Ternary ( Expr left, Token leftOp, Expr middle, Token rightOp, Expr right ) {
      this.left = left;
      this.leftOp = leftOp;
      this.middle = middle;
      this.rightOp = rightOp;
      this.right = right;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitTernaryExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterTernaryExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveTernaryExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitTernaryExpr(this);
    }
  }

  static class TypeCheck extends Expr {
    final Expr value;
    final Class<?> type;
    final Token name;

    TypeCheck ( Expr value, Class<?> type, Token name ) {
      this.value = value;
      this.type = type;
      this.name = name;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitTypeCheckExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterTypeCheckExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveTypeCheckExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitTypeCheckExpr(this);
    }
  }

  static class Unary extends Expr {
    final Token operator;
    final Expr right;

    Unary ( Token operator, Expr right ) {
      this.operator = operator;
      this.right = right;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitUnaryExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterUnaryExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveUnaryExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitUnaryExpr(this);
    }
  }

  static class Variable extends Expr {
    final Token name;

    Variable ( Token name ) {
      this.name = name;
    }

    @Override
    void voidVisit(VoidVisitor visitor) {
        visitor.visitVariableExpr(this);
    }

    @Override
    void enter(WalkVisitor visitor) {
        visitor.enterVariableExpr(this);
    }

    @Override
    void leave(WalkVisitor visitor) {
        visitor.leaveVariableExpr(this);
    }

    @Override
    <R> R visit(Visitor<R> visitor) {
        return visitor.visitVariableExpr(this);
    }
  }

    abstract void voidVisit(VoidVisitor visitor);

    @SuppressWarnings("UnusedReturnValue")
    abstract <R> R visit(Visitor<R> visitor);

    abstract void enter(WalkVisitor visitor);
    abstract void leave(WalkVisitor visitor);
}
