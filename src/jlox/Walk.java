package jlox;

import java.util.List;
import java.util.Stack;

public class Walk implements Walker.AstVisitor {

    static class Base extends Walk {

        private WalkerData walker;

        protected Stdio stdio() { return walker.stdio(); }
        @SuppressWarnings("unused")
        protected int scopeDepth() { return walker.scopeDepth(); }
        @SuppressWarnings("SameParameterValue")
        protected Stmt parentStmt(int depth) { return walker.parentStmt(depth); }

        @Override
        public void InjectWalker(WalkerData walker) { this.walker = walker; }
    }

    // ============ Automatically generated by the compiler ============

    @Override
    public void enterSequence(List<Stmt> stmts) {

    }

    @Override
    public void leaveSequence(List<Stmt> stmts) {

    }

    @Override
    public void enterStmt(Stmt stmt) {

    }

    @Override
    public void leaveStmt(Stmt stmt) {

    }

    @Override
    public void InjectWalker(WalkerData walker) {

    }

    @Override
    public void enterAssignExpr(Expr.Assign assign) {

    }

    @Override
    public void leaveAssignExpr(Expr.Assign assign) {

    }

    @Override
    public void enterBinaryExpr(Expr.Binary binary) {

    }

    @Override
    public void leaveBinaryExpr(Expr.Binary binary) {

    }

    @Override
    public void enterCallExpr(Expr.Call call) {

    }

    @Override
    public void leaveCallExpr(Expr.Call call) {

    }

    @Override
    public void enterGetExpr(Expr.Get get) {

    }

    @Override
    public void leaveGetExpr(Expr.Get get) {

    }

    @Override
    public void enterGroupingExpr(Expr.Grouping grouping) {

    }

    @Override
    public void leaveGroupingExpr(Expr.Grouping grouping) {

    }

    @Override
    public void enterLambdaExpr(Expr.Lambda lambda) {

    }

    @Override
    public void leaveLambdaExpr(Expr.Lambda lambda) {

    }

    @Override
    public void enterLiteralExpr(Expr.Literal literal) {

    }

    @Override
    public void leaveLiteralExpr(Expr.Literal literal) {

    }


    @Override
    public void enterSetExpr(Expr.Set set) {

    }

    @Override
    public void leaveSetExpr(Expr.Set set) {

    }

    @Override
    public void enterSuperExpr(Expr.Super expr) {

    }

    @Override
    public void leaveSuperExpr(Expr.Super expr) {

    }

    @Override
    public void enterTernaryExpr(Expr.Ternary ternary) {

    }

    @Override
    public void leaveTernaryExpr(Expr.Ternary ternary) {

    }

    @Override
    public void enterTypeCheckExpr(Expr.TypeCheck typeCheck) {

    }

    @Override
    public void leaveTypeCheckExpr(Expr.TypeCheck typeCheck) {

    }

    @Override
    public void enterUnaryExpr(Expr.Unary unary) {

    }

    @Override
    public void leaveUnaryExpr(Expr.Unary unary) {

    }

    @Override
    public void enterVariableExpr(Expr.Variable variable) {

    }

    @Override
    public void leaveVariableExpr(Expr.Variable variable) {

    }

    @Override
    public void enterBlockStmt(Stmt.Block stmt) {

    }

    @Override
    public void leaveBlockStmt(Stmt.Block stmt) {

    }

    @Override
    public void enterForBlockStmt(Stmt.ForBlock stmt) {

    }

    @Override
    public void leaveForBlockStmt(Stmt.ForBlock stmt) {

    }

    @Override
    public void enterClassStmt(Stmt.Class stmt) {

    }

    @Override
    public void leaveClassStmt(Stmt.Class stmt) {

    }

    @Override
    public void enterMethodsStmt(Stmt.Methods stmt) {

    }

    @Override
    public void leaveMethodsStmt(Stmt.Methods stmt) {

    }

    @Override
    public void enterExpressionStmt(Stmt.Expression stmt) {

    }

    @Override
    public void leaveExpressionStmt(Stmt.Expression stmt) {

    }

    @Override
    public void enterFunctionStmt(Stmt.Function stmt) {

    }

    @Override
    public void leaveFunctionStmt(Stmt.Function stmt) {

    }

    @Override
    public void enterIfStmt(Stmt.If stmt) {

    }

    @Override
    public void leaveIfStmt(Stmt.If stmt) {

    }

    @Override
    public void enterKeywordStmt(Stmt.Keyword stmt) {

    }

    @Override
    public void leaveKeywordStmt(Stmt.Keyword stmt) {

    }

    @Override
    public void enterLastStmt(Stmt.Last stmt) {

    }

    @Override
    public void leaveLastStmt(Stmt.Last stmt) {

    }

    @Override
    public void enterPrintStmt(Stmt.Print stmt) {

    }

    @Override
    public void leavePrintStmt(Stmt.Print stmt) {

    }

    @Override
    public void enterReturnStmt(Stmt.Return stmt) {

    }

    @Override
    public void leaveReturnStmt(Stmt.Return stmt) {

    }

    @Override
    public void enterVarStmt(Stmt.Var stmt) {

    }

    @Override
    public void leaveVarStmt(Stmt.Var stmt) {

    }

    @Override
    public void enterWhileStmt(Stmt.While stmt) {

    }

    @Override
    public void leaveWhileStmt(Stmt.While stmt) {

    }



}
